
source: https://www.jmeiners.com/lc3-vm/#c-ldi-sample-block-31

Assembly examples
    - example of hello world assembly program:

.ORIG x3000                        ; this is the address in memory where the program will be loaded
LEA R0, HELLO_STR                  ; load the address of the HELLO_STR string into R0
PUTs                               ; output the string pointed to by R0 to the console
HALT                               ; halt the program
HELLO_STR .STRINGZ "Hello World!"  ; store this string here in the program
.END                               ; mark the end of the file

    - some of the above instructions look similar to the opcodes we defined
    - the assembly is translated via the assembler into an array of 16 bit instructions called
    machine code that the computer will execute
    - loops and conditions are done with goto like instructions:

AND R0, R0, 0                      ; clear R0
LOOP                               ; label at the top of our loop
ADD R0, R0, 1                      ; add 1 to R0 and store back in R0
ADD R1, R0, -10                    ; subtract 10 from R0 and store back in R1
BRn LOOP                           ; go back to LOOP if the result was negative
... ; R0 is now 10!

Executing instructions
    - The procedure for a program to execute:
        1. we load one instruction from memory at the address stored in the program counter register (FETCH)
        2. the program counter is then incremented
        3. the computer then looks at the opcode to determine the instruction to execute (DECODE)
        4. the instruction is executed with the parameters in the instructions (EXECUTE)
        5. go back to step 1
    - we dont run out of instructions because goto like instructions jump the program counter changing the
    flow of execution
    -

Implementing Instructions
    - In this section we will implement the instructions
    - The encoding for the ADD instruction will look like this:
        - The first four bits (15-12th bit) is the opcode for OP_ADD (0001)
        - bits 11-9 (3 bits) is the destination register where the sum will
          be added
        - bits 8-6 (3 bits) is the register where the first number to add is
        - the 5th bit determines the mode of the instruction: immediate or
          register mode.  In register mode the second number to add is
          stored in another address similar to the first number.  This
          address is indicated by the 2-0th bits (the other bits are unused).

          when 5th bit is set to 1:
          immediate mode, the second value to add is embedded within the
          instruction (from 4-0th bits).  This removes the need to load the
          second value and reduces the number of instructions.  The tradeoff
          is that the second value can only be as large as 2^5=32 unsigned
          so immediate mode is mainly used for incrementation.

        - whenever we write a value to a register we will update the condition
          flag to indicate its sign


LDI: load indirect
    - load a value from memory into a register
    - PCoffset9 is the memory address to load the value from
    - this is sign extended and added to the program counter to get the address
      to load the value from
    - some bits are dedicated for the opcode and some dedicated for the
    destination register (DR).
    - In order to get the address the value is stored in we need to sign extend
    bits [8:0] so it matches a 16 bit number
    - since the LD instruction is limited to address offsets of 9 bits (the memory
    needs 16 bits) the LDI can load insctructions that are local to the program
    counter (since we are offsetting from the program counter)


Trap routines
    - The LC-3 provides several trap routines for doing common tasks or interacting
    with IO
    - trap routines can be thought of as APIs to the operating system
    - similar to an opcode, each trap routine is assigned a trap code. To execute
    a trap routine, you call the TRAP instruction with the trap code of the
    corresponding routine
    - the trap routines themselves are written in assembly
    - When a trap code is called, the PC is moved to the routines starting address.
    The routine is executed and once complete, the PC moves back to the address
    following the initial call to the routine.
    -
















