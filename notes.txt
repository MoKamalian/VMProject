

Assembly examples
    - example of hello world assembly program:

.ORIG x3000                        ; this is the address in memory where the program will be loaded
LEA R0, HELLO_STR                  ; load the address of the HELLO_STR string into R0
PUTs                               ; output the string pointed to by R0 to the console
HALT                               ; halt the program
HELLO_STR .STRINGZ "Hello World!"  ; store this string here in the program
.END                               ; mark the end of the file

    - some of the above instructions look similar to the opcodes we defined
    - the assembly is translated via the assembler into an array of 16 bit instructions called
    machine code that the computer will execute
    - loops and conditions are done with goto like instructions:

AND R0, R0, 0                      ; clear R0
LOOP                               ; label at the top of our loop
ADD R0, R0, 1                      ; add 1 to R0 and store back in R0
ADD R1, R0, -10                    ; subtract 10 from R0 and store back in R1
BRn LOOP                           ; go back to LOOP if the result was negative
... ; R0 is now 10!

Executing instructions
    - The procedure for a program to execute:
        1. we load one instruction from memory at the address stored in the program counter register (FETCH)
        2. the program counter is then incremented
        3. the computer then looks at the opcode to determine the instruction to execute (DECODE)
        4. the instruction is executed with the parameters in the instructions (EXECUTE)
        5. go back to step 1
    - we dont run out of instructions because goto like instructions jump the program counter changing the
    flow of execution
    -

Implementing Instructions
    -







